update.packages(lib.loc = NULL, ask = FALSE)
q(save="no")
#if "devtools" isn't installed, please "install.packages('devtools')" first.
devtools::install_version('RcppEigen', version = "0.3.2.9.0")
#if "devtools" isn't installed, please "install.packages('devtools')" first.
require("devtools")
#if "devtools" isn't installed, please "install.packages('devtools')" first.
install.packages('devtools')
require("devtools")
devtools::install_version('RcppEigen', version = "0.3.2.9.0")
devtools::install_version('RcppEigen', version = "0.3.2.9.0")
require("devtools")
devtools::install_version('RcppEigen', version = "0.3.2.9.0")
install.packages("RcppEigen")
devtools::install_github("hclimente/snpStats")
update.packages(lib.loc = NULL, ask=FALSE)
q(save="no")
update.packages(lib.loc = NULL, ask = F)
q(save=@no)
q(save="no")
update.packages(lib.loc=NULL, ask = F)
q(save="no")
m <- matrix(1:18, nrow=3, ncol=6)
m
m[2,c(4,5)]
m[2,4,2,5]
m[2:5]
m[4:5,2]
q(save="no")
install.packages("RMySQL")
# install.packages("RMySQL")
require(RMySQL)
require(ggplot2)
require(dplyr)
mydb = dbConnect(MySQL(), user='root', password='', dbname='limidb', host='localhost') # be careful as the name of db is limidb not limidb2 or limidb3
dbListTables(mydb) # see the tables in the object
dbListFields(mydb, 'otutbl') # see the column headers of specified table
# rs = dbSendQuery(mydb, "SELECT * FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id JOIN p_metadata ON otutbl.sample = p_metadata.sample") # entire dataset from sql
# data = fetch(rs, n=-1) # entire dataset from sql
rs = dbSendQuery(mydb, "SELECT otutbl.sample, otutbl.abundance, p_taxonomy.Phylum FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id") # selected columns in the dataset from sql
data_red = fetch(rs, n=-1) # get everything as a df
data_red$abundance <- as.numeric(data_red$abundance) # change class of abundance to numeric
data_red <- aggregate(abundance~Phylum+sample,data=data_red,FUN=mean) # remove duplicated rows based of the Phylum+sample columns and calculate the mean of abundance for duplicated rows
data_red[,c("sample","Phylum","abundance")]-> data_red # reorder the d.f
data_red %>% mutate(rescale=sqrt(abundance)) ->data_red # calculate a normalized count column based on sqrt of abundance
#ggplot(data_red, aes(Phylum, sample, fill=abundance)) + geom_tile(aes(fill=abundance), colour= "white")
ggplot(data_red, aes(Phylum, sample))+ geom_tile(aes(fill = rescale),colour = "white") + # heatmap based on rescale column and white background
scale_fill_gradient(low = "white",high = "green") + # fill the tiles from white to green
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = "none",axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) # scale for x and y away from plot and edges, with the y tilted at 45 for better readibility
###
my_col <- c('#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#b35806','#e08214','#fdb863','#fee0b6','#f7f7f7','#d8daeb','#b2abd2','#8073ac','#542788','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#f4a582','#fddbc7','#d1e5f0')
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=my_col)# + scale_fill_manual(values=getPalette(colour))
n <- 30
palette <- distinctColorPalette(n)
library(randomcoloR)
install.packages("randomcoloR")
install.packages("randomcoloR")
biocLite()
head(colors())
head(colours())
head(colorspaces())
length(colors())
install.packages("randomcoloR")
options("repos")
rstra
q(save="NO")
q(save="no")
require(RMySQL)
require(ggplot2)
require(dplyr)
mydb = dbConnect(MySQL(), user='root', password='', dbname='limidb', host='localhost') # be careful as the name of db is limidb not limidb2 or limidb3
dbListTables(mydb) # see the tables in the object
dbListFields(mydb, 'otutbl') # see the column headers of specified table
# rs = dbSendQuery(mydb, "SELECT * FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id JOIN p_metadata ON otutbl.sample = p_metadata.sample") # entire dataset from sql
# data = fetch(rs, n=-1) # entire dataset from sql
rs = dbSendQuery(mydb, "SELECT otutbl.sample, otutbl.abundance, p_taxonomy.Phylum FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id") # selected columns in the dataset from sql
data_red = fetch(rs, n=-1) # get everything as a df
data_red$abundance <- as.numeric(data_red$abundance) # change class of abundance to numeric
data_red <- aggregate(abundance~Phylum+sample,data=data_red,FUN=mean) # remove duplicated rows based of the Phylum+sample columns and calculate the mean of abundance for duplicated rows
data_red[,c("sample","Phylum","abundance")]-> data_red # reorder the d.f
data_red %>% mutate(rescale=sqrt(abundance)) ->data_red # calculate a normalized count column based on sqrt of abundance
#ggplot(data_red, aes(Phylum, sample, fill=abundance)) + geom_tile(aes(fill=abundance), colour= "white")
ggplot(data_red, aes(Phylum, sample))+ geom_tile(aes(fill = rescale),colour = "white") + # heatmap based on rescale column and white background
scale_fill_gradient(low = "white",high = "green") + # fill the tiles from white to green
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = "none",axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) # scale for x and y away from plot and edges, with the y tilted at 45 for better readibility
###
my_col <- c('#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#b35806','#e08214','#fdb863','#fee0b6','#f7f7f7','#d8daeb','#b2abd2','#8073ac','#542788','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#f4a582','#fddbc7','#d1e5f0')
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=my_col)# + scale_fill_manual(values=getPalette(colour))
#scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Accent"))(colourCount)) + scale_fill_manual(values = colorRampPalette(brewer_pal(30, "Accent")))# +scale_fill_brewer(palette = "jco")
n <- 30
install.packages("randomcoloR")
mydb = dbConnect(MySQL(), user='root', password='', dbname='limidb', host='localhost') # be careful as the name of db is limidb not limidb2 or limidb3
data_red = fetch(rs, n=-1) # get everything as a df
data_red$abundance <- as.numeric(data_red$abundance) # change class of abundance to numeric
View(data_red)
# rs = dbSendQuery(mydb, "SELECT * FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id JOIN p_metadata ON otutbl.sample = p_metadata.sample") # entire dataset from sql
# data = fetch(rs, n=-1) # entire dataset from sql
rs = dbSendQuery(mydb, "SELECT otutbl.sample, otutbl.abundance, p_taxonomy.Phylum FROM otutbl JOIN p_taxonomy ON otutbl.otu = p_taxonomy.out_id") # selected columns in the dataset from sql
data_red = fetch(rs, n=-1) # get everything as a df
data_red$abundance <- as.numeric(data_red$abundance) # change class of abundance to numeric
data_red <- aggregate(abundance~Phylum+sample,data=data_red,FUN=mean) # remove duplicated rows based of the Phylum+sample columns and calculate the mean of abundance for duplicated rows
data_red[,c("sample","Phylum","abundance")]-> data_red # reorder the d.f
data_red %>% mutate(rescale=sqrt(abundance)) ->data_red # calculate a normalized count column based on sqrt of abundance
#ggplot(data_red, aes(Phylum, sample, fill=abundance)) + geom_tile(aes(fill=abundance), colour= "white")
ggplot(data_red, aes(Phylum, sample))+ geom_tile(aes(fill = rescale),colour = "white") + # heatmap based on rescale column and white background
scale_fill_gradient(low = "white",high = "green") + # fill the tiles from white to green
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position = "none",axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) # scale for x and y away from plot and edges, with the y tilted at 45 for better readibility
###
my_col <- c('#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#b35806','#e08214','#fdb863','#fee0b6','#f7f7f7','#d8daeb','#b2abd2','#8073ac','#542788','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#f4a582','#fddbc7','#d1e5f0')
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=my_col)# + scale_fill_manual(values=getPalette(colour))
n <- 30
library(randomcoloR)
palette <- distinctColorPalette(n)
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=palette)# + scale_fill_manual(values=getPalette(colour))
###
n <- unique(data_red$Phylum)
###
n <- count(unique(data_red$Phylum))
###
n <- length(unique(data_red$Phylum))
library(randomcoloR)
palette <- distinctColorPalette(n)
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=distinctColorPalette(length(unique(data_red$Phylum))))# + scale_fill_manual(values=getPalette(colour))
unique(data_red$Phylum)
length(unique(data_red$Phylum))
values=distinctColorPalette(length(unique(data_red$Phylum)))
set.seed=20181105
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=distinctColorPalette(length(unique(data_red$Phylum))))# + scale_fill_manual(values=getPalette(colour))
set.seed=20181105
ggplot() + geom_bar(aes(y = abundance, x = sample, fill = Phylum), data = data_red,  stat="identity",position="fill") +scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + theme(legend.position="right", legend.direction="vertical",legend.title = element_blank(),axis.ticks = element_blank(),axis.text.x = element_text(angle = 45, hjust = 1,size=5),axis.text.y = element_text(size=5)) +scale_fill_manual(values=distinctColorPalette(length(unique(data_red$Phylum))))# + scale_fill_manual(values=getPalette(colour))
getwd()
wk <- read.table("~/stat_assembly.tsv", header = TRUE, sep=sep = '\t')
wk <- read.table("~/stat_assembly.tsv", header = TRUE, sep = '\t')
View(wk)
seq(from=31, to=71, by=10)
wk$kmer_size <- seq(from=31, to=71, by=10)
require(ggplot2)
names(wk)
ggplot(wk, aes(x=kmer_size, y=c(n,N50,sum)))+ geom_line()
ggplot(wk, aes(x=kmer_size, y=n,N50,sum))+ geom_line()
wk[1:5,]
ggplot(wk[1:5,], aes(x=kmer_size, y=n,N50,sum))+ geom_line()
names(wk)
ggplot(wk[1:5,], aes(group=kmer_size, col=kmer_size, x=sum, y=))+ geom_line()
ggplot(wk[1:5,], aes(group=kmer_size, col=kmer_size, x=sum, y=kmer_size))+ geom_line()
ggplot(wk[1:5,], aes(group=kmer_size, col=kmer_size, y=sum, x=kmer_size))+ geom_line()
ggplot(wk, aes(group=kmer_size, col=kmer_size, y=sum, x=kmer_size))+ geom_line()
list()
list("con")
wk$type <-
ggplot(wk, aes(group=kmer_size, col=kmer_size, y=sum, x=kmer_size))+ geom_line()
wk$type <-
ggplot(wk, aes(y=sum, x=kmer_size))+ geom_line()
wk$type <-
ggplot(wk, aes(x=sum, y=kmer_size))+ geom_line()
names(wk)
wk$type <-
ggplot(wk, aes(y=n, x=kmer_size))+ geom_line()
ggplot(wk, aes(y=n, x=kmer_size))+ geom_line()
wk %>% tidyr::gather("id", "value", 1:10 %>%
wk %>% tidyr::gather("id", "value", 1:10) %>%
ggplot(., aes(Xax, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
require(magrittr)
wk %>% tidyr::gather("id", "value", 1:10) %>%
ggplot(., aes(Xax, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", "value", 1:10) %>%
ggplot(., aes(kmer_size, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", log("value"), 1:10) %>%
ggplot(., aes(kmer_size, value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", "value", 1:10) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", "value", 1:9) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
names(wk)
wk %>% tidyr::gather("id", "value", c(1,3,5:7) %>%
wk %>% tidyr::gather("id", "value", c(1,3,5:7)) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", "value", c(1,3,5,6)) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id)
wk %>% tidyr::gather("id", "value", c(1,3,5,6)) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")#+facet_wrap(~id)
wk %>% tidyr::gather("id", "value", c(1,3,5,6)) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+facet_wrap(~id)
wk %>% tidyr::gather("id", "value", c(1,3,5,6)) %>%
ggplot(., aes(kmer_size, log(value)))+
geom_point()+scale_color_brewer(palette="Dark2")+
geom_smooth(method = "lm", se=FALSE, color="black")+facet_wrap(~id)
update.packages(lib.loc = NULL, ask=FALSE)
BiocInstaller::biocLite(ask=FALSE)
sudo()
q(save="no")
BiocInstaller::biocLite(type="source", ask=FALSE)
update.packages(ask = FALSE,lib.loc = NULL)
update.packages(lib.loc =NULL, ask = FALSE)
q(save="no")
library(phyloseq)
install.packages(Rcpp)
install.packages("Rcpp")
library(phyloseq)
library('phyloseq')
install.packages("rlang")
library('phyloseq')
q(save='no')
library('shiny')
sessionInfo()
runApp('module2_R_biostats-master/shiny')
runApp('module2_R_biostats-master/shiny')
